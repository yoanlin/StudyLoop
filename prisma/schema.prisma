generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  authorId     String   @db.ObjectId
  author       User     @relation("AuthorPosts",fields: [authorId], references: [id])
  content      String
  fieldId      String   @db.ObjectId
  field        Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  comments     Comment[]
  collectors   PostCollector[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique @db.String
  name          String   @db.String
  username      String   @unique @db.String
  image         String?  @db.String
  emailVerified DateTime? 
  providers     String[]  @default([]) @db.String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]    @relation("AuthorPosts")
  comments      Comment[]
  collections   PostCollector[]
  subscriptions UserSubscription[]
  accounts      Account[]
}

model Field {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @db.String @unique
  posts      Post[]
  postCount  Int      @default(0)
  subscriber UserSubscription[]
  createdAt DateTime @default(now())
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String   @db.String
  rating      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @db.ObjectId
  post        Post     @relation(fields: [postId], references: [id])
  postId      String   @db.ObjectId
}

model PostCollector {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model UserSubscription {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fieldId    String   @db.ObjectId
  field      Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  @@unique([userId, fieldId])
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  user               User     @relation(fields: [userId], references: [id])
  type               String   @db.String
  provider           String   @db.String
  providerAccountId  String   @db.String
  password           String?  @db.String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?  @db.String
  scope              String?  @db.String
  id_token           String?
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([provider, providerAccountId])
}
